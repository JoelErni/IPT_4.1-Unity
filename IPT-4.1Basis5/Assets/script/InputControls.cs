//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/script/InputAction_Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAction_Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAction_Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAction_Input"",
    ""maps"": [
        {
            ""name"": ""GravityOn"",
            ""id"": ""ca3c92a1-01a6-4fa9-8dcd-3193656971cc"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b3cbb6bf-26d7-4329-9197-6df88954c565"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""fe7f5fba-3f59-46cd-9d92-04c6397cd260"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""03a479a8-48b9-4ed3-872e-e066a2b30012"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""1c08cdba-c870-40fc-b3fb-5f5ac6f4490c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e8ee84f8-fcd9-41e2-a244-a2ab6212e7cd"",
                    ""path"": ""3DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7b13f2a2-8e52-4a77-95ee-ef78d1a51711"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""231ff4f8-0823-491c-890b-4529d5b7c65c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""671e5b48-5565-46ff-9c7c-26eb2d69228f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""96c49933-57c6-4357-b0ac-9f5928c871d6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9363fdef-6b92-4095-abbb-a70f6f7d96cd"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acdf20b1-e11b-4984-812b-5691e75428a7"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c34c18b-d55a-4d0f-a27e-c11e77c82c61"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ControllScheme"",
            ""bindingGroup"": ""ControllScheme"",
            ""devices"": []
        }
    ]
}");
        // GravityOn
        m_GravityOn = asset.FindActionMap("GravityOn", throwIfNotFound: true);
        m_GravityOn_Movement = m_GravityOn.FindAction("Movement", throwIfNotFound: true);
        m_GravityOn_Look = m_GravityOn.FindAction("Look", throwIfNotFound: true);
        m_GravityOn_Run = m_GravityOn.FindAction("Run", throwIfNotFound: true);
        m_GravityOn_Interact = m_GravityOn.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GravityOn
    private readonly InputActionMap m_GravityOn;
    private IGravityOnActions m_GravityOnActionsCallbackInterface;
    private readonly InputAction m_GravityOn_Movement;
    private readonly InputAction m_GravityOn_Look;
    private readonly InputAction m_GravityOn_Run;
    private readonly InputAction m_GravityOn_Interact;
    public struct GravityOnActions
    {
        private @InputAction_Input m_Wrapper;
        public GravityOnActions(@InputAction_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GravityOn_Movement;
        public InputAction @Look => m_Wrapper.m_GravityOn_Look;
        public InputAction @Run => m_Wrapper.m_GravityOn_Run;
        public InputAction @Interact => m_Wrapper.m_GravityOn_Interact;
        public InputActionMap Get() { return m_Wrapper.m_GravityOn; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GravityOnActions set) { return set.Get(); }
        public void SetCallbacks(IGravityOnActions instance)
        {
            if (m_Wrapper.m_GravityOnActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnLook;
                @Run.started -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnRun;
                @Interact.started -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_GravityOnActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_GravityOnActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public GravityOnActions @GravityOn => new GravityOnActions(this);
    private int m_ControllSchemeSchemeIndex = -1;
    public InputControlScheme ControllSchemeScheme
    {
        get
        {
            if (m_ControllSchemeSchemeIndex == -1) m_ControllSchemeSchemeIndex = asset.FindControlSchemeIndex("ControllScheme");
            return asset.controlSchemes[m_ControllSchemeSchemeIndex];
        }
    }
    public interface IGravityOnActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
